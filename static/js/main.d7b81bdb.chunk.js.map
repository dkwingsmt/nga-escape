{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["between","cn","ca","cb","n","charCodeAt","a","b","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","originalText","convertedText","convertedInput","React","createRef","onClick","bind","assertThisInitialized","onChange","onKeyDown","doConvert","evt","ctrlKey","keycode","isEventKey","setState","target","value","_this2","_ref","src","_","map","c","concat","join","current","ref","focus","select","classes","_this$state","react_default","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Grid_default","container","body","FormControl_default","fullWidth","TextField_default","multiline","textField","label","placeholder","buttons","index_es","inputProps","readOnly","Component","withStyles","width","textFieldInput","minHeight","maxWidth","margin","marginTop","display","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7b81bdb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport keycode from 'keycode';\nimport _ from 'lodash';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport { Button } from '@material-ui/core';\n\nconst jssClasses = () => ({\n  textField: {\n    width: '100%',\n  },\n\n  textFieldInput: {\n    minHeight: '5em',\n  },\n\n  body: {\n    maxWidth: 768,\n    margin: 'auto',\n    marginTop: 20,\n  },\n\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    margin: '10px 20px',\n  },\n});\n\nfunction between(cn, ca, cb) {\n  const n = cn.charCodeAt(0);\n  const a = ca.charCodeAt(0);\n  const b = cb.charCodeAt(0);\n  return n >= a && n <= b;\n}\n\nfunction escape(src) {\n  return _(src)\n    .map((c) => {\n      if (\n        between(c, '①', '⓿') ||\n        between(c, '←', '↙')\n      ) {\n        return `&#${c.charCodeAt(0)};`;\n      }\n      return c;\n    })\n    .join('');\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalText: '',\n      convertedText: '',\n    };\n    this.convertedInput = React.createRef();\n\n    this.onClick = this.onClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  onClick() {\n    this.doConvert();\n  }\n\n  onKeyDown(evt) {\n    if (evt.ctrlKey && keycode.isEventKey(evt, 'enter')) {\n      this.doConvert();\n    }\n  }\n\n  onChange(evt) {\n    this.setState({\n      originalText: evt.target.value,\n    });\n  }\n\n  doConvert() {\n    this.setState(({ originalText }) => ({\n      convertedText: escape(originalText),\n    }), () => {\n      if (this.convertedInput.current) {\n        const ref = this.convertedInput.current;\n        ref.focus();\n        ref.select();\n      }\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { convertedText, originalText } = this.state;\n\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"title\" color=\"inherit\">\n              NGA Escape\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container className={classes.body}>\n          <FormControl\n            fullWidth\n          >\n            <TextField\n              multiline\n              className={classes.textField}\n              label=\"转换前\"\n              placeholder=\"在这里输入你想要转换的文字……\"\n              value={originalText}\n              onChange={this.onChange}\n              onKeyDown={this.onKeyDown}\n            />\n            <div className={classes.buttons}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.onClick}\n              >\n                {'转换（Ctrl-回车）'}\n              </Button>\n            </div>\n            <TextField\n              inputProps={{\n                ref: this.convertedInput,\n              }}\n              readOnly\n              multiline\n              className={classes.textField}\n              label=\"转换后\"\n              placeholder=\"这里将显示转换后的文字\"\n              value={convertedText}\n            />\n          </FormControl>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(jssClasses)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}