{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["between","cn","ca","cb","n","charCodeAt","a","b","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","originalText","convertedText","options","squareBracketR","convertedInput","React","createRef","onClick","bind","assertThisInitialized","onChange","onKeyDown","doConvert","evt","ctrlKey","keycode","isEventKey","setState","target","value","key","_this2","checked","_ref2","assign","defineProperty","_this3","_ref3","src","_ref","converted","_","map","c","concat","join","replace","escape","current","ref","focus","select","classes","react_default","createElement","FormControlLabel_default","control","Checkbox_default","onOptionCheckboxChange","label","monospaceCheckboxLabel","_this$state","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","toolbarTitle","IconButton_default","aria-label","href","packageJson","repository","url","rel","lib_default","svg","GithubIcon","icon","Grid_default","container","body","TextField_default","inputProps","textFieldInput","multiline","textField","placeholder","mid","FormControl_default","component","optionsContainer","FormLabel_default","renderOptionCheckbox","submitContainer","index_es","readOnly","description","gutterBottom","Component","withStyles","width","maxHeight","flexGrow","height","fill","maxWidth","margin","marginTop","display","flex","fontFamily","padding","border","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ee87d20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport keycode from 'keycode';\nimport _ from 'lodash';\nimport SVGInline from 'react-svg-inline';\n\nimport GithubIcon from 'simple-icons/icons/github';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport { Button } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\nimport packageJson from '../package.json';\n\nconst jssClasses = () => ({\n  textField: {\n    width: '100%',\n  },\n\n  textFieldInput: {\n    maxHeight: '20em',\n  },\n\n  toolbarTitle: {\n    flexGrow: 1,\n  },\n\n  icon: {\n    height: 24,\n    width: 24,\n    fill: 'white',\n  },\n\n  body: {\n    maxWidth: 768,\n    margin: 'auto',\n    marginTop: 20,\n  },\n\n  mid: {\n    display: 'flex',\n    margin: '10px 20px',\n    width: '100%',\n  },\n\n  optionsContainer: {\n    flex: 1,\n  },\n\n  submitContainer: {\n    flex: '0 0 auto',\n  },\n\n  monospaceCheckboxLabel: {\n    fontFamily: 'monospace',\n  },\n\n  description: {\n    maxWidth: 512,\n    margin: 'auto',\n    marginTop: 30,\n    padding: 20,\n    border: '1px solid #eee',\n  },\n});\n\nfunction between(cn, ca, cb) {\n  const n = cn.charCodeAt(0);\n  const a = ca.charCodeAt(0);\n  const b = cb.charCodeAt(0);\n  return n >= a && n <= b;\n}\n\nfunction escape(src, { squareBracketR }) {\n  let converted = _(src)\n    .map((c) => {\n      if (\n        between(c, '①', '⓿') ||\n        between(c, '←', '↙') ||\n        between(c, '〈', '】') ||\n        between(c, '\\u2500', '\\u25FF') || // Geometry symbols\n        between(c, '\\u2600', '\\u26FF') // Miscellaneous symbols\n      ) {\n        return `&#${c.charCodeAt(0)};`;\n      }\n      return c;\n    })\n    .join('');\n  if (squareBracketR) {\n    converted = converted.replace('[R]', '[[b][/b]R]');\n  }\n  return converted;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalText: '',\n      convertedText: '',\n      options: {\n        squareBracketR: true,\n      },\n    };\n    this.convertedInput = React.createRef();\n\n    this.onClick = this.onClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  onClick() {\n    this.doConvert();\n  }\n\n  onKeyDown(evt) {\n    if (evt.ctrlKey && keycode.isEventKey(evt, 'enter')) {\n      this.doConvert();\n    }\n  }\n\n  onChange(evt) {\n    this.setState({\n      originalText: evt.target.value,\n    });\n  }\n\n  onOptionCheckboxChange(key) {\n    return (evt, checked) => {\n      this.setState(({ options }) => ({\n        options: Object.assign({},\n          options,\n          { [key]: !!checked }),\n      }));\n    };\n  }\n\n  doConvert() {\n    this.setState(({ originalText, options }) => ({\n      convertedText: escape(originalText, options),\n    }), () => {\n      if (this.convertedInput.current) {\n        const ref = this.convertedInput.current;\n        ref.focus();\n        ref.select();\n      }\n    });\n  }\n\n  renderOptionCheckbox(key) {\n    const { classes } = this.props;\n    return (\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={this.state.options[key] || false}\n            onChange={this.onOptionCheckboxChange(key)}\n          />\n        }\n        label=\"[R]\"\n        classes={{\n          label: classes.monospaceCheckboxLabel,\n        }}\n      />\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { convertedText, originalText } = this.state;\n\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography\n              variant=\"title\"\n              color=\"inherit\"\n              className={classes.toolbarTitle}\n            >\n              NGA特殊符号转换器\n            </Typography>\n\n            <IconButton\n              aria-label=\"GitHub\"\n              href={packageJson.repository.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <SVGInline\n                svg={GithubIcon.svg}\n                className={classes.icon}\n              />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Grid container className={classes.body}>\n          <TextField\n            inputProps={{\n              className: classes.textFieldInput,\n            }}\n            variant=\"outlined\"\n            multiline\n            className={classes.textField}\n            label=\"转换前\"\n            placeholder=\"在这里输入你想要转换的文字……\"\n            value={originalText}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n          />\n          <div className={classes.mid}>\n            <FormControl component=\"fieldset\" className={classes.optionsContainer}>\n              <FormLabel component=\"legend\">特别转换项</FormLabel>\n              {this.renderOptionCheckbox('squareBracketR')}\n            </FormControl>\n            <div className={classes.submitContainer}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.onClick}\n                classes={{\n\n                }}\n              >\n                {'转换（Ctrl-回车）'}\n              </Button>\n            </div>\n          </div>\n          <TextField\n            inputProps={{\n              ref: this.convertedInput,\n              className: classes.textFieldInput,\n            }}\n            readOnly\n            variant=\"outlined\"\n            multiline\n            className={classes.textField}\n            label=\"转换后\"\n            placeholder=\"这里将显示转换后的文字\"\n            value={convertedText}\n          />\n          <div className={classes.description}>\n            <Typography variant=\"title\" gutterBottom>\n              说明\n            </Typography>\n            <Typography>\n              本工具用于将 bbs.nga.com 会自动隐藏的特殊符号转换为 HTML 编码的形式。\n            </Typography>\n            <Typography>\n              本工具只会转换选定范围的字符。如想新增范围，请至\n              <a\n                href=\"https://github.com/dkwingsmt/nga-escape/issues/new\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                这里\n              </a>\n              提出。\n            </Typography>\n          </div>\n        </Grid>\n\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(jssClasses)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}